"""Reinitialize migrations

Revision ID: b1dc227f99bc
Revises: 
Create Date: 2025-04-29 08:56:55.192200

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b1dc227f99bc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('CommentData_data')
    op.drop_table('Comment_data')
    op.drop_table('Comment')
    op.drop_table('comment_data')
    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.drop_constraint('article_user_id_fkey', type_='foreignkey')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.alter_column('text',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('date_posted',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.drop_constraint('comment_article_id_fkey', type_='foreignkey')
        batch_op.drop_column('article_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('article_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key('comment_article_id_fkey', 'article', ['article_id'], ['id'])
        batch_op.alter_column('date_posted',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('text',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key('article_user_id_fkey', 'user', ['user_id'], ['id'])

    op.create_table('comment_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date_posted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='comment_data_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comment_data_pkey')
    )
    op.create_table('Comment',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Comment_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('text', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('date_posted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='Comment_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='Comment_pkey')
    )
    op.create_table('Comment_data',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Comment_data_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date_posted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='Comment_data_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='Comment_data_pkey')
    )
    op.create_table('CommentData_data',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"CommentData_data_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date_posted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='CommentData_data_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='CommentData_data_pkey')
    )
    # ### end Alembic commands ###
